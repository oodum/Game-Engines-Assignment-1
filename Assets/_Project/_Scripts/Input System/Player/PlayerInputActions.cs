//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/_Project/_Scripts/Input System/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Fight"",
            ""id"": ""ce1bbbdb-6906-4763-bc10-4fdee34873ff"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""29668032-e004-41e2-869a-7f04e9273216"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""e8d4ccdb-c924-4e6d-ae90-fa2e0eab0ed2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""1c642fd1-b3a5-4521-9d9c-91f2cda295a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a6b35e0b-4eae-483f-88cd-c28df423113e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Cast"",
                    ""type"": ""Button"",
                    ""id"": ""e00456d5-b97b-4205-b780-3738d6e2e275"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Cast"",
                    ""type"": ""Button"",
                    ""id"": ""cf3a80c5-26c4-48c0-8b65-647156cd8532"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88da7e56-9a1f-4f99-b94e-e211b1ce019b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56b70922-d74a-4034-a61c-cc68865bf4db"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f019876-91a6-44dd-8161-a2d25601d79d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce0cde8-4826-437c-974d-f1cd1cb8f7aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4c90828-bdc3-4e1d-b1d3-a8c98e8ffce8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1d868c7-9e0d-4e34-bc47-514deb5aab0c"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""978ed50f-7d1c-4696-8d59-3370cb60e3c4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc928c63-ef60-44bf-b067-6404404f428f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Passive"",
            ""id"": ""f226ae5c-daed-4c66-b8d4-baab310fca83"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3c068bc5-0df0-4bb0-9b44-582a45df53e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""38be31bd-2a2a-4355-abce-cf8d2e5869c6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9d21b653-4f84-489f-91f6-2efba013966e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""27a51d40-7d95-4fb5-9f39-1bcb6687aae3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""668e50c8-0f44-44e7-ab46-4957a8d1d574"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""05a65222-a847-49c1-8348-a55eb8b85890"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Fight
        m_Fight = asset.FindActionMap("Fight", throwIfNotFound: true);
        m_Fight_Up = m_Fight.FindAction("Up", throwIfNotFound: true);
        m_Fight_Down = m_Fight.FindAction("Down", throwIfNotFound: true);
        m_Fight_Left = m_Fight.FindAction("Left", throwIfNotFound: true);
        m_Fight_Right = m_Fight.FindAction("Right", throwIfNotFound: true);
        m_Fight_PrimaryCast = m_Fight.FindAction("Primary Cast", throwIfNotFound: true);
        m_Fight_SecondaryCast = m_Fight.FindAction("Secondary Cast", throwIfNotFound: true);
        // Passive
        m_Passive = asset.FindActionMap("Passive", throwIfNotFound: true);
        m_Passive_Move = m_Passive.FindAction("Move", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        Debug.Assert(!m_Fight.enabled, "This will cause a leak and performance issues, PlayerInputActions.Fight.Disable() has not been called.");
        Debug.Assert(!m_Passive.enabled, "This will cause a leak and performance issues, PlayerInputActions.Passive.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fight
    private readonly InputActionMap m_Fight;
    private List<IFightActions> m_FightActionsCallbackInterfaces = new List<IFightActions>();
    private readonly InputAction m_Fight_Up;
    private readonly InputAction m_Fight_Down;
    private readonly InputAction m_Fight_Left;
    private readonly InputAction m_Fight_Right;
    private readonly InputAction m_Fight_PrimaryCast;
    private readonly InputAction m_Fight_SecondaryCast;
    public struct FightActions
    {
        private @PlayerInputActions m_Wrapper;
        public FightActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Fight_Up;
        public InputAction @Down => m_Wrapper.m_Fight_Down;
        public InputAction @Left => m_Wrapper.m_Fight_Left;
        public InputAction @Right => m_Wrapper.m_Fight_Right;
        public InputAction @PrimaryCast => m_Wrapper.m_Fight_PrimaryCast;
        public InputAction @SecondaryCast => m_Wrapper.m_Fight_SecondaryCast;
        public InputActionMap Get() { return m_Wrapper.m_Fight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightActions set) { return set.Get(); }
        public void AddCallbacks(IFightActions instance)
        {
            if (instance == null || m_Wrapper.m_FightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FightActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @PrimaryCast.started += instance.OnPrimaryCast;
            @PrimaryCast.performed += instance.OnPrimaryCast;
            @PrimaryCast.canceled += instance.OnPrimaryCast;
            @SecondaryCast.started += instance.OnSecondaryCast;
            @SecondaryCast.performed += instance.OnSecondaryCast;
            @SecondaryCast.canceled += instance.OnSecondaryCast;
        }

        private void UnregisterCallbacks(IFightActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @PrimaryCast.started -= instance.OnPrimaryCast;
            @PrimaryCast.performed -= instance.OnPrimaryCast;
            @PrimaryCast.canceled -= instance.OnPrimaryCast;
            @SecondaryCast.started -= instance.OnSecondaryCast;
            @SecondaryCast.performed -= instance.OnSecondaryCast;
            @SecondaryCast.canceled -= instance.OnSecondaryCast;
        }

        public void RemoveCallbacks(IFightActions instance)
        {
            if (m_Wrapper.m_FightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFightActions instance)
        {
            foreach (var item in m_Wrapper.m_FightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FightActions @Fight => new FightActions(this);

    // Passive
    private readonly InputActionMap m_Passive;
    private List<IPassiveActions> m_PassiveActionsCallbackInterfaces = new List<IPassiveActions>();
    private readonly InputAction m_Passive_Move;
    public struct PassiveActions
    {
        private @PlayerInputActions m_Wrapper;
        public PassiveActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Passive_Move;
        public InputActionMap Get() { return m_Wrapper.m_Passive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PassiveActions set) { return set.Get(); }
        public void AddCallbacks(IPassiveActions instance)
        {
            if (instance == null || m_Wrapper.m_PassiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PassiveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPassiveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPassiveActions instance)
        {
            if (m_Wrapper.m_PassiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPassiveActions instance)
        {
            foreach (var item in m_Wrapper.m_PassiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PassiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PassiveActions @Passive => new PassiveActions(this);
    public interface IFightActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnPrimaryCast(InputAction.CallbackContext context);
        void OnSecondaryCast(InputAction.CallbackContext context);
    }
    public interface IPassiveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
